{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"15adc88ff3fc236050824309d279061794b0912a","modified":1469940515000},{"_id":"source/CNAME","hash":"40764f7c313e1cd263a5e5eccabe6d67fc344754","modified":1469940515000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1469940515000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1469940515000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1469940515000},{"_id":"themes/landscape/_config.yml","hash":"4da41e2b590741c4b8264305327931aee843284e","modified":1469940515000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1469940515000},{"_id":"source/_posts/React-Native环境搭建.md","hash":"3deaae32a2ddbe3665629509169dee3fcc013098","modified":1469940515000},{"_id":"source/_posts/JavaScript原型.md","hash":"ac466c37b452cb6f93952b1d0b0475871a159532","modified":1469940515000},{"_id":"source/_posts/AnglarJS-Tips.md","hash":"503ce9c3484e036f06bb0d1efbbf305cadc46156","modified":1469940515000},{"_id":"source/_posts/对linux文件权限的理解.md","hash":"175b55fa6483db7051d79cdba84237b068c5c775","modified":1470452325000},{"_id":"source/_posts/阳光正好.md","hash":"54abaebdcf035ef9b3e4ec6c73b8c7e6d48147e8","modified":1469940515000},{"_id":"source/_posts/随想2016-05-23.md","hash":"b859ae4c89f516767d86d121c8430aa9bd7e0ca9","modified":1469940515000},{"_id":"source/_posts/angular-compile.md","hash":"b51b511faf28371de06db96a2d974a9d162f797d","modified":1469940515000},{"_id":"source/about/index.md","hash":"e9830ad7f4ac23ea4c1e75955ac3f757f4fdad53","modified":1469940515000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1469940515000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1469940515000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1469940515000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1469940515000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1469940515000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1469940515000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1469940515000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/cnzz-analytics.ejs","hash":"dcc73d81e7d816db588bcc15607bb09a72caf7ad","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"be12acb4f0ea350b0b56df4078475c2c4f33e545","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6fa688c0959bd8cc5af3f5adc58bdb8bd6c2f26d","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"da9a4ab32efc44c098f317fe64e2335989929b0e","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1469940515000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"7a1c6375347f57505ab6b3526481c37e0e0c1f05","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1469940515000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1469940515000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1469940515000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1469940515000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1469940515000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1469940515000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1469940515000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1469940515000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/post/baidu_share.ejs","hash":"2e618a06d87ba8da70c42776fdd75c6decb8fc13","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/post/disqus.ejs","hash":"ca49ee93ff818628b503c96aa9756f6e7f22175e","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/post/duoshuo.ejs","hash":"33d076687642f13512870962e21926bd13f17cbd","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1469940515000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1469940515000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1469940515000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1469940515000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"633b62a209edbda0d7ad450ca98545f22f354034","modified":1469940515000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"7bd58dd127d90b56a5cc04a143cf695c202f809a","modified":1469940515000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"36eefe6332b86b66023a9884b754d305235846b4","modified":1469940515000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1469940515000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1469940515000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1469940515000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1469940515000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1469940515000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1469940515000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1469940515000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1469940515000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1469940515000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1469940515000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469940515000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1469940515000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1469940515000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1469940515000},{"_id":"public/atom.xml","hash":"6a43e7e9a413ddb14d0f7268641e1c769e51318c","modified":1470452325997},{"_id":"public/sitemap.xml","hash":"00ce71eb232b146f3065ce141b92e715df8a132b","modified":1470452326031},{"_id":"public/about/index.html","hash":"5a9349d343843953edc64ec7657782e8a598d65d","modified":1470270466541},{"_id":"public/2016/06/26/阳光正好/index.html","hash":"48bfa40c09536428cb9aed785eb4eeba9e180e2e","modified":1470270466552},{"_id":"public/archives/index.html","hash":"43cc912dd1674677bf09002e290b44bfe8265276","modified":1470270466619},{"_id":"public/2016/05/23/随想2016-05-23/index.html","hash":"731d96c5af40c3c5bb269a20c0b5d85ef822e765","modified":1470270466622},{"_id":"public/archives/2015/index.html","hash":"056b73e5c219de168fe20c2ba0581ff8bd03c18b","modified":1470270466622},{"_id":"public/archives/2016/index.html","hash":"c946fd1b3ef8f3dde9a51ff84429e66f2467521f","modified":1470270466622},{"_id":"public/archives/page/2/index.html","hash":"8fc7065f63fd235792ce5613a9cc33cc334b9e43","modified":1470270466623},{"_id":"public/archives/2016/05/index.html","hash":"b63bffdfd32b9ce7db4c428b0b4af93b0331df29","modified":1470270466623},{"_id":"public/archives/2016/06/index.html","hash":"96252cf5efc4283b26150d7441aeccddd70005d9","modified":1470270466623},{"_id":"public/archives/2016/08/index.html","hash":"e57084e2f0f37c4c9c0de3fc255478e24932e140","modified":1470270466623},{"_id":"public/archives/2016/07/index.html","hash":"782b3bfd1fe0fefe4d3a1000e1ccced62ee59ffb","modified":1470270466623},{"_id":"public/categories/JavaScript/index.html","hash":"922b812596a8e4c815a4c445a85b12d40205732d","modified":1470270466623},{"_id":"public/categories/linux/index.html","hash":"46b85266dce5678d3db19b405fcc0b7a8a7a11a8","modified":1470270466623},{"_id":"public/categories/JavaScript/AngularJS/index.html","hash":"af03cb8a7781d05e2e369c7da0d60422edc7e5ac","modified":1470270466623},{"_id":"public/2016/07/14/React-Native环境搭建/index.html","hash":"6333ac48750205601e5507715cdd7d279de44b7a","modified":1470270466623},{"_id":"public/2016/08/03/对linux文件权限的理解/index.html","hash":"a6edd791750daf2fce9761a9bdd0ed0d987e52e3","modified":1470452326627},{"_id":"public/2016/05/28/AnglarJS-Tips/index.html","hash":"879ab7ca45fba8d210f42d07797bc795e6bc1a2e","modified":1470270466623},{"_id":"public/2015/12/15/JavaScript原型/index.html","hash":"97d0235926a1bcfbbd8017ce4301c388ec23d5ea","modified":1470270466623},{"_id":"public/2015/12/13/angular-compile/index.html","hash":"bd37512449681cc58f3c06b1f8495e5669cc200c","modified":1470270466624},{"_id":"public/categories/JavaScript/React/index.html","hash":"1e3f57382131aaef478d404cb7d83ea3daa0cd2a","modified":1470270466630},{"_id":"public/categories/随笔/index.html","hash":"51de68fe6b4c9d6f4c60e066583a7a32807864d5","modified":1470270466630},{"_id":"public/categories/JavaScript/原型/index.html","hash":"8fac2fb1e7176b477a8a9a55769a024766039586","modified":1470270466631},{"_id":"public/categories/linux/权限/index.html","hash":"071f630409b6b95485663e3bea5b993c98805590","modified":1470270466631},{"_id":"public/tags/javascript/index.html","hash":"69deb230d91f103668ab21edf56a3e6ff14d5219","modified":1470270466631},{"_id":"public/tags/react/index.html","hash":"d85cce962b90fcfd691d09d3f8555e6adeed2c30","modified":1470270466631},{"_id":"public/tags/react-native/index.html","hash":"7e0c1317270ef453af35bfb56c803f82b050a8f1","modified":1470270466632},{"_id":"public/tags/prototype/index.html","hash":"2434a1459a2ba3188e992a9a9b68e94ad5fb1a9c","modified":1470270466632},{"_id":"public/tags/原型/index.html","hash":"c4ceca8332e3ccab9ea4fe84e5d2fdd43dd259a8","modified":1470270466632},{"_id":"public/tags/权限/index.html","hash":"3e455ab5691f6586578c91b7a800e7947c9d8ea0","modified":1470270466632},{"_id":"public/tags/双向绑定/index.html","hash":"9789c242d3fcdc2630859ecf05a693a5a7c05be9","modified":1470270466632},{"_id":"public/tags/命令/index.html","hash":"5355dd03455ae98b3071e663ca9be7e911019ec5","modified":1470270466632},{"_id":"public/tags/AngularJS/index.html","hash":"3bb7a0da83fbdf0f71ecba0ce62c939fbf06d17c","modified":1470270466632},{"_id":"public/tags/脏数据检测/index.html","hash":"f144cdb520226376928f9bc58d1eebbb4af3ebaa","modified":1470270466633},{"_id":"public/tags/随笔/index.html","hash":"167079d55f4377122bd5b7413495e583708de10c","modified":1470270466633},{"_id":"public/tags/随想/index.html","hash":"7af5c7d81aff58d8afa0b032965f0c7155372be5","modified":1470270466633},{"_id":"public/tags/compile/index.html","hash":"271da70fa0cce7192feb6dcf50868fdd2e8a5eb7","modified":1470270466634},{"_id":"public/tags/编译/index.html","hash":"8e08eede355016a6a4143371332ee18cb7db5241","modified":1470270466634},{"_id":"public/archives/2015/12/index.html","hash":"8aa944d4b8f8b34456bccbf85c9c397d825bb24e","modified":1470270466634},{"_id":"public/index.html","hash":"1f4cd315157a9823109bef0db4cbd91847c06ab5","modified":1470451804619},{"_id":"public/page/2/index.html","hash":"6cd6e9160d05b60a313dc004661a8e40e4568acd","modified":1470270466634},{"_id":"public/favicon.ico","hash":"15adc88ff3fc236050824309d279061794b0912a","modified":1470270466640},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470270466640},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470270466641},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470270466641},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470270466641},{"_id":"public/CNAME","hash":"40764f7c313e1cd263a5e5eccabe6d67fc344754","modified":1470270466641},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470270466641},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470270466641},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470270466641},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470270466641},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470270466641},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470270466641},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470270467213},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1470270467221},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470270467221},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470270467221},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470270467221},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470270467221},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470270467221},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470270467221},{"_id":"public/css/style.css","hash":"2dad4b85979e4cd99546d6689dfbdb806f40fc29","modified":1470270467221},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470270467221},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470270467221},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1470270467224},{"_id":"public/css/images/banner.jpg","hash":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1470270467224}],"Category":[{"name":"JavaScript","_id":"cirfl2nhh0004v9s6ohu80igv"},{"name":"linux","_id":"cirfl2ni0000cv9s6gk9k4hqa"},{"name":"AngularJS","parent":"cirfl2nhh0004v9s6ohu80igv","_id":"cirfl2ni2000ev9s6cwzv19qk"},{"name":"React","parent":"cirfl2nhh0004v9s6ohu80igv","_id":"cirfl2ni4000jv9s6n3lgg55c"},{"name":"随笔","_id":"cirfl2ni6000nv9s6j6ear7up"},{"name":"原型","parent":"cirfl2nhh0004v9s6ohu80igv","_id":"cirfl2ni8000wv9s6w0br3bra"},{"name":"权限","parent":"cirfl2ni0000cv9s6gk9k4hqa","_id":"cirfl2nib0015v9s6wnmgbr1f"}],"Data":[],"Page":[{"title":"关于我","date":"2015-12-13T05:24:17.000Z","comments":0,"_content":"\n这是[Gpia](https://github.com/gpia)的技术博客，希望能够和各位分享一些编程过程中遇到的问题和学到的东西。欢迎各位批评指正。我现在主要从事于web前端的开发，当然我也对其他方向感兴趣，比如linux管理，nodejs，shell，javaweb，c/c++等。为了不空，加张图片。\n\n{% qnimg x.png title:萌 alt:萌 'class:' %}","source":"about/index.md","raw":"title: 关于我\ndate: 2015-12-13 13:24:17\ncomments: false\n---\n\n这是[Gpia](https://github.com/gpia)的技术博客，希望能够和各位分享一些编程过程中遇到的问题和学到的东西。欢迎各位批评指正。我现在主要从事于web前端的开发，当然我也对其他方向感兴趣，比如linux管理，nodejs，shell，javaweb，c/c++等。为了不空，加张图片。\n\n{% qnimg x.png title:萌 alt:萌 'class:' %}","updated":"2016-07-31T04:48:35.000Z","path":"about/index.html","layout":"page","_id":"cirfl2nh80001v9s6vwhx29wg","content":"<p>这是<a href=\"https://github.com/gpia\" target=\"_blank\" rel=\"external\">Gpia</a>的技术博客，希望能够和各位分享一些编程过程中遇到的问题和学到的东西。欢迎各位批评指正。我现在主要从事于web前端的开发，当然我也对其他方向感兴趣，比如linux管理，nodejs，shell，javaweb，c/c++等。为了不空，加张图片。</p>\n<img title=\"萌\" alt=\"萌\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/x.png\">","excerpt":"","more":"<p>这是<a href=\"https://github.com/gpia\">Gpia</a>的技术博客，希望能够和各位分享一些编程过程中遇到的问题和学到的东西。欢迎各位批评指正。我现在主要从事于web前端的开发，当然我也对其他方向感兴趣，比如linux管理，nodejs，shell，javaweb，c/c++等。为了不空，加张图片。</p>\n<img title=\"萌\" alt=\"萌\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/x.png\">"}],"Post":[{"title":"React Native环境搭建","date":"2016-07-14T15:28:33.000Z","_content":"\n最近尝试了下React Native，[官网的安装教程](https://facebook.github.io/react-native/docs/getting-started.html#content)，已经写的非常详细了，但是我在环境配置的过程中，还是发现了一些大坑。\n\n***重点是watchman的版本得是4.0以上！***\n\n如果你按找官方的教程，搭建好了Android或者IOS的开发环境，安装了[watchman](https://facebook.github.io/watchman)，在使用react native跑示例程序的时候，报错，出现一些奇怪的报错，那么很大可能就是这个原因！尤其是mac，在可能已经安装了watchman的情况下，需要卸载老版本，重新安装最新的版本。\n\n<!-- more --> \n\n在mac上，可以使用Homebrew安装最新版watchman的命令是：\n```Bash\nwatchman -v  #查看watchman的版本\nbrew uninstall watchman  #卸载\nbrew unlink watchman  \nbrew install --HEAD watchman  #通过github直接安装最新版本的watchman\n```\n\n如果是开发React Native的Android程序，那么需要先搭建Android开发环境，如果是开发IOS的程序，需要先搭建IOS的开发环境。\n按照教程上的，如果是开发Android应用，那么需要配置Android开发环境，当然最方便的就是，直接下载Android官方开发工具[Android Studio](https://developer.android.com/studio/install.html)，如果不能翻墙上不去，就去这里找一找[http://www.androiddevtools.cn/](http://www.androiddevtools.cn/)。然后打开里面的Android SDK Manager下载相应的sdk、模拟器镜像等等，并将Android SDK的路径加入用户环境变量，用于在命令行被调用。注意MAC和windows平台上环境变量的设置。\n\n对于Android方式，借助Android Studio可以方便地创建安卓模拟器、启动模拟器，然后，在其上跑React Native的应用。\n对于IOS，好像只能是在mac上开发，有了xcode，安装ios模拟器之后，就和安卓的方式一样了。\n\n下面列出一些Android开发常用的命令（来自android sdk，请确保android sdk路径已经被加入path环境变量），比如通过命令行创建模拟器或者启动模拟器，虚拟机即模拟器。\n```Bash\nandroid list avd  #查看所有的虚拟机\nandroid create avd  #创建虚拟机\nemulator -avd avd-name  #启动虚拟机，avd-name 不要带后缀.avd\nadb devices  #查看已经启动的安卓设备（包括模拟器和通过usb连接的手机）\n```\n\n","source":"_posts/React-Native环境搭建.md","raw":"title: React Native环境搭建\ndate: 2016-07-14 23:28:33\ncategories: [JavaScript,React]\ntags: [javascript,react,react native]\n---\n\n最近尝试了下React Native，[官网的安装教程](https://facebook.github.io/react-native/docs/getting-started.html#content)，已经写的非常详细了，但是我在环境配置的过程中，还是发现了一些大坑。\n\n***重点是watchman的版本得是4.0以上！***\n\n如果你按找官方的教程，搭建好了Android或者IOS的开发环境，安装了[watchman](https://facebook.github.io/watchman)，在使用react native跑示例程序的时候，报错，出现一些奇怪的报错，那么很大可能就是这个原因！尤其是mac，在可能已经安装了watchman的情况下，需要卸载老版本，重新安装最新的版本。\n\n<!-- more --> \n\n在mac上，可以使用Homebrew安装最新版watchman的命令是：\n```Bash\nwatchman -v  #查看watchman的版本\nbrew uninstall watchman  #卸载\nbrew unlink watchman  \nbrew install --HEAD watchman  #通过github直接安装最新版本的watchman\n```\n\n如果是开发React Native的Android程序，那么需要先搭建Android开发环境，如果是开发IOS的程序，需要先搭建IOS的开发环境。\n按照教程上的，如果是开发Android应用，那么需要配置Android开发环境，当然最方便的就是，直接下载Android官方开发工具[Android Studio](https://developer.android.com/studio/install.html)，如果不能翻墙上不去，就去这里找一找[http://www.androiddevtools.cn/](http://www.androiddevtools.cn/)。然后打开里面的Android SDK Manager下载相应的sdk、模拟器镜像等等，并将Android SDK的路径加入用户环境变量，用于在命令行被调用。注意MAC和windows平台上环境变量的设置。\n\n对于Android方式，借助Android Studio可以方便地创建安卓模拟器、启动模拟器，然后，在其上跑React Native的应用。\n对于IOS，好像只能是在mac上开发，有了xcode，安装ios模拟器之后，就和安卓的方式一样了。\n\n下面列出一些Android开发常用的命令（来自android sdk，请确保android sdk路径已经被加入path环境变量），比如通过命令行创建模拟器或者启动模拟器，虚拟机即模拟器。\n```Bash\nandroid list avd  #查看所有的虚拟机\nandroid create avd  #创建虚拟机\nemulator -avd avd-name  #启动虚拟机，avd-name 不要带后缀.avd\nadb devices  #查看已经启动的安卓设备（包括模拟器和通过usb连接的手机）\n```\n\n","slug":"React-Native环境搭建","published":1,"updated":"2016-07-31T04:48:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirfl2nh10000v9s6zjflpqok","content":"<p>最近尝试了下React Native，<a href=\"https://facebook.github.io/react-native/docs/getting-started.html#content\" target=\"_blank\" rel=\"external\">官网的安装教程</a>，已经写的非常详细了，但是我在环境配置的过程中，还是发现了一些大坑。</p>\n<p><strong><em>重点是watchman的版本得是4.0以上！</em></strong></p>\n<p>如果你按找官方的教程，搭建好了Android或者IOS的开发环境，安装了<a href=\"https://facebook.github.io/watchman\" target=\"_blank\" rel=\"external\">watchman</a>，在使用react native跑示例程序的时候，报错，出现一些奇怪的报错，那么很大可能就是这个原因！尤其是mac，在可能已经安装了watchman的情况下，需要卸载老版本，重新安装最新的版本。</p>\n<a id=\"more\"></a> \n<p>在mac上，可以使用Homebrew安装最新版watchman的命令是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">watchman -v  <span class=\"comment\">#查看watchman的版本</span></div><div class=\"line\">brew uninstall watchman  <span class=\"comment\">#卸载</span></div><div class=\"line\">brew unlink watchman  </div><div class=\"line\">brew install --HEAD watchman  <span class=\"comment\">#通过github直接安装最新版本的watchman</span></div></pre></td></tr></table></figure></p>\n<p>如果是开发React Native的Android程序，那么需要先搭建Android开发环境，如果是开发IOS的程序，需要先搭建IOS的开发环境。<br>按照教程上的，如果是开发Android应用，那么需要配置Android开发环境，当然最方便的就是，直接下载Android官方开发工具<a href=\"https://developer.android.com/studio/install.html\" target=\"_blank\" rel=\"external\">Android Studio</a>，如果不能翻墙上不去，就去这里找一找<a href=\"http://www.androiddevtools.cn/\" target=\"_blank\" rel=\"external\">http://www.androiddevtools.cn/</a>。然后打开里面的Android SDK Manager下载相应的sdk、模拟器镜像等等，并将Android SDK的路径加入用户环境变量，用于在命令行被调用。注意MAC和windows平台上环境变量的设置。</p>\n<p>对于Android方式，借助Android Studio可以方便地创建安卓模拟器、启动模拟器，然后，在其上跑React Native的应用。<br>对于IOS，好像只能是在mac上开发，有了xcode，安装ios模拟器之后，就和安卓的方式一样了。</p>\n<p>下面列出一些Android开发常用的命令（来自android sdk，请确保android sdk路径已经被加入path环境变量），比如通过命令行创建模拟器或者启动模拟器，虚拟机即模拟器。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">android list avd  <span class=\"comment\">#查看所有的虚拟机</span></div><div class=\"line\">android create avd  <span class=\"comment\">#创建虚拟机</span></div><div class=\"line\">emulator -avd avd-name  <span class=\"comment\">#启动虚拟机，avd-name 不要带后缀.avd</span></div><div class=\"line\">adb devices  <span class=\"comment\">#查看已经启动的安卓设备（包括模拟器和通过usb连接的手机）</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>最近尝试了下React Native，<a href=\"https://facebook.github.io/react-native/docs/getting-started.html#content\">官网的安装教程</a>，已经写的非常详细了，但是我在环境配置的过程中，还是发现了一些大坑。</p>\n<p><strong><em>重点是watchman的版本得是4.0以上！</em></strong></p>\n<p>如果你按找官方的教程，搭建好了Android或者IOS的开发环境，安装了<a href=\"https://facebook.github.io/watchman\">watchman</a>，在使用react native跑示例程序的时候，报错，出现一些奇怪的报错，那么很大可能就是这个原因！尤其是mac，在可能已经安装了watchman的情况下，需要卸载老版本，重新安装最新的版本。</p>","more":"<p>在mac上，可以使用Homebrew安装最新版watchman的命令是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">watchman -v  <span class=\"comment\">#查看watchman的版本</span></div><div class=\"line\">brew uninstall watchman  <span class=\"comment\">#卸载</span></div><div class=\"line\">brew unlink watchman  </div><div class=\"line\">brew install --HEAD watchman  <span class=\"comment\">#通过github直接安装最新版本的watchman</span></div></pre></td></tr></table></figure></p>\n<p>如果是开发React Native的Android程序，那么需要先搭建Android开发环境，如果是开发IOS的程序，需要先搭建IOS的开发环境。<br>按照教程上的，如果是开发Android应用，那么需要配置Android开发环境，当然最方便的就是，直接下载Android官方开发工具<a href=\"https://developer.android.com/studio/install.html\">Android Studio</a>，如果不能翻墙上不去，就去这里找一找<a href=\"http://www.androiddevtools.cn/\">http://www.androiddevtools.cn/</a>。然后打开里面的Android SDK Manager下载相应的sdk、模拟器镜像等等，并将Android SDK的路径加入用户环境变量，用于在命令行被调用。注意MAC和windows平台上环境变量的设置。</p>\n<p>对于Android方式，借助Android Studio可以方便地创建安卓模拟器、启动模拟器，然后，在其上跑React Native的应用。<br>对于IOS，好像只能是在mac上开发，有了xcode，安装ios模拟器之后，就和安卓的方式一样了。</p>\n<p>下面列出一些Android开发常用的命令（来自android sdk，请确保android sdk路径已经被加入path环境变量），比如通过命令行创建模拟器或者启动模拟器，虚拟机即模拟器。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">android list avd  <span class=\"comment\">#查看所有的虚拟机</span></div><div class=\"line\">android create avd  <span class=\"comment\">#创建虚拟机</span></div><div class=\"line\">emulator -avd avd-name  <span class=\"comment\">#启动虚拟机，avd-name 不要带后缀.avd</span></div><div class=\"line\">adb devices  <span class=\"comment\">#查看已经启动的安卓设备（包括模拟器和通过usb连接的手机）</span></div></pre></td></tr></table></figure></p>"},{"title":"JavaScript原型","date":"2015-12-15T14:39:17.000Z","_content":"\nJavaScript中对象的继承可以通过原型来实现，下面主要来说一下原型相关的问题。\n以下是一些结论，详见文章内的验证：\n\n*\t函数都有prototype属性，由函数构造的对象来继承。\n*\t普通对象都隐含一个其所继承的原型的属性\\_\\_proto\\_\\_，除了Object.prototype这个特殊对象等。\n*\t所有的函数都是Function类的实例。\n*   所有的对象都是Object类的实例。\n*   Function类是Object类的实例，Object函数也是Function类的实例。\n*\t所有的函数都是对象，所以函数既有prototype属性，也有\\_\\_proto\\_\\_属性。\n*   原型链的最顶端是Object.prototype，该对象向上再没有原型了， Object.prototype.\\_\\_proto\\_\\_ === null。\n    由于Object.prototype这个对象比较特殊，它没有原型，会导致 Object.prototype instanceof Object 返回 false，这和instanceof的工作方式有关。\n\n<!-- more --> \n我是很早就想对JS的原型链做一个总结，也推荐别人的一篇文章[JavaScript 原型概念深入理解](http://www.codeceo.com/article/javascript-prototype-learn.html)。\n\n以下是验证图：\n{% qnimg 2015-12-27-function-prototype.png title:属性在原型链中查找 alt:属性在原型链中查找 'class:' %}\n{% qnimg 2015-12-27-function-prototype-2.png title:属性在原型链中查找 alt:属性在原型链中查找 'class:' %}\n{% qnimg function-instance.png title:函数都是Function类的实例 alt:函数都是Function类的实例 'class:' %}\n{% qnimg object-instance.png title:对象都是Object类的实例 alt:对象都是Object类的实例 'class:' %}\n{% qnimg 2015-12-27-function-prototype-4.png title:Function和Object alt:Function和Object 'class:' %}","source":"_posts/JavaScript原型.md","raw":"title: JavaScript原型\ndate: 2015-12-15 22:39:17\ncategories: [JavaScript,原型]\ntags: [javascript,prototype,原型]\n---\n\nJavaScript中对象的继承可以通过原型来实现，下面主要来说一下原型相关的问题。\n以下是一些结论，详见文章内的验证：\n\n*\t函数都有prototype属性，由函数构造的对象来继承。\n*\t普通对象都隐含一个其所继承的原型的属性\\_\\_proto\\_\\_，除了Object.prototype这个特殊对象等。\n*\t所有的函数都是Function类的实例。\n*   所有的对象都是Object类的实例。\n*   Function类是Object类的实例，Object函数也是Function类的实例。\n*\t所有的函数都是对象，所以函数既有prototype属性，也有\\_\\_proto\\_\\_属性。\n*   原型链的最顶端是Object.prototype，该对象向上再没有原型了， Object.prototype.\\_\\_proto\\_\\_ === null。\n    由于Object.prototype这个对象比较特殊，它没有原型，会导致 Object.prototype instanceof Object 返回 false，这和instanceof的工作方式有关。\n\n<!-- more --> \n我是很早就想对JS的原型链做一个总结，也推荐别人的一篇文章[JavaScript 原型概念深入理解](http://www.codeceo.com/article/javascript-prototype-learn.html)。\n\n以下是验证图：\n{% qnimg 2015-12-27-function-prototype.png title:属性在原型链中查找 alt:属性在原型链中查找 'class:' %}\n{% qnimg 2015-12-27-function-prototype-2.png title:属性在原型链中查找 alt:属性在原型链中查找 'class:' %}\n{% qnimg function-instance.png title:函数都是Function类的实例 alt:函数都是Function类的实例 'class:' %}\n{% qnimg object-instance.png title:对象都是Object类的实例 alt:对象都是Object类的实例 'class:' %}\n{% qnimg 2015-12-27-function-prototype-4.png title:Function和Object alt:Function和Object 'class:' %}","slug":"JavaScript原型","published":1,"updated":"2016-07-31T04:48:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirfl2nh90002v9s6hyqueraz","content":"<p>JavaScript中对象的继承可以通过原型来实现，下面主要来说一下原型相关的问题。<br>以下是一些结论，详见文章内的验证：</p>\n<ul>\n<li>函数都有prototype属性，由函数构造的对象来继承。</li>\n<li>普通对象都隐含一个其所继承的原型的属性__proto__，除了Object.prototype这个特殊对象等。</li>\n<li>所有的函数都是Function类的实例。</li>\n<li>所有的对象都是Object类的实例。</li>\n<li>Function类是Object类的实例，Object函数也是Function类的实例。</li>\n<li>所有的函数都是对象，所以函数既有prototype属性，也有__proto__属性。</li>\n<li>原型链的最顶端是Object.prototype，该对象向上再没有原型了， Object.prototype.__proto__ === null。<br>由于Object.prototype这个对象比较特殊，它没有原型，会导致 Object.prototype instanceof Object 返回 false，这和instanceof的工作方式有关。</li>\n</ul>\n<a id=\"more\"></a> \n<p>我是很早就想对JS的原型链做一个总结，也推荐别人的一篇文章<a href=\"http://www.codeceo.com/article/javascript-prototype-learn.html\" target=\"_blank\" rel=\"external\">JavaScript 原型概念深入理解</a>。</p>\n<p>以下是验证图：<br><img title=\"属性在原型链中查找\" alt=\"属性在原型链中查找\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/2015-12-27-function-prototype.png\"><br><img title=\"属性在原型链中查找\" alt=\"属性在原型链中查找\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/2015-12-27-function-prototype-2.png\"><br><img title=\"函数都是Function类的实例\" alt=\"函数都是Function类的实例\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/function-instance.png\"><br><img title=\"对象都是Object类的实例\" alt=\"对象都是Object类的实例\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/object-instance.png\"><br><img title=\"Function和Object\" alt=\"Function和Object\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/2015-12-27-function-prototype-4.png\"></p>\n","excerpt":"<p>JavaScript中对象的继承可以通过原型来实现，下面主要来说一下原型相关的问题。<br>以下是一些结论，详见文章内的验证：</p>\n<ul>\n<li>函数都有prototype属性，由函数构造的对象来继承。</li>\n<li>普通对象都隐含一个其所继承的原型的属性__proto__，除了Object.prototype这个特殊对象等。</li>\n<li>所有的函数都是Function类的实例。</li>\n<li>所有的对象都是Object类的实例。</li>\n<li>Function类是Object类的实例，Object函数也是Function类的实例。</li>\n<li>所有的函数都是对象，所以函数既有prototype属性，也有__proto__属性。</li>\n<li>原型链的最顶端是Object.prototype，该对象向上再没有原型了， Object.prototype.__proto__ === null。<br>由于Object.prototype这个对象比较特殊，它没有原型，会导致 Object.prototype instanceof Object 返回 false，这和instanceof的工作方式有关。</li>\n</ul>","more":"<p>我是很早就想对JS的原型链做一个总结，也推荐别人的一篇文章<a href=\"http://www.codeceo.com/article/javascript-prototype-learn.html\">JavaScript 原型概念深入理解</a>。</p>\n<p>以下是验证图：<br><img title=\"属性在原型链中查找\" alt=\"属性在原型链中查找\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/2015-12-27-function-prototype.png\"><br><img title=\"属性在原型链中查找\" alt=\"属性在原型链中查找\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/2015-12-27-function-prototype-2.png\"><br><img title=\"函数都是Function类的实例\" alt=\"函数都是Function类的实例\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/function-instance.png\"><br><img title=\"对象都是Object类的实例\" alt=\"对象都是Object类的实例\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/object-instance.png\"><br><img title=\"Function和Object\" alt=\"Function和Object\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/2015-12-27-function-prototype-4.png\"></p>"},{"title":"对linux文件权限的理解","date":"2016-08-03T00:06:02.000Z","_content":"\n*nix系统中，文件的各种权限比较重要，以下内容，是通过学习《鸟哥的linxu私房菜》之后总结的内容，方便自己理解和记忆。这篇文章最早发布于[我的博客园](http://www.cnblogs.com/ilvu/p/4002992.html)。\n\n文件和目录都有权限：r、w 、x，并且对于 拥有者（属主），同组用户，其他用户 都有对应的权限限制。\n* 对于文件：r代表读，可读取文件的内容；w代表写，可修改文件的内容；x代表执行，可以执行文件\n* 对于目录（记录文件清单）：r代表可以列出其中文件的相关信息；w代表目录下文件和目录的删除、重命名、新建；x代表可以以该目录作为工作目录\n \n总结：\n* 文件的访问及使用限制由文件本身的权限决定，但是文件名称的修改、文件本身的删除是由文件所在目录的w权限决定的\n* 文件的拥有着或者root可以修改文件或者目录的权限\n \n显然的，对于所有以文件的方式存在的命令，它们也有权限，所以，比如cd、ls等系统提供的命令也是有权限的，可以通过删除其x权限禁止用户使用该命令。\n用户使用系统：即用户通过一个程序去操作文件或档案，要顺利进行这一动作，得满足两个条件：\n\n* 对该程序文件的执行权限，如对 cd 、ls 等的x权限\n* 对要操作的目标文件的访问权限，如r，w\n\n举例：用户 dvid 进行操作：cat readme.md，首先 dvid 得具有 cat 程式的执行权限：x，其次 dvid 得具有 readme.md 的读权限：r。具体见下图\n{% qnimg 2016-08-06-linux-authority.png title:linux文件权限演示 alt:linux文件权限演示 'class:' %}\n","source":"_posts/对linux文件权限的理解.md","raw":"title: 对linux文件权限的理解\ndate: 2016-08-03 08:06:02\ncategories: [linux,权限]\ntags: [权限,命令]\n---\n\n*nix系统中，文件的各种权限比较重要，以下内容，是通过学习《鸟哥的linxu私房菜》之后总结的内容，方便自己理解和记忆。这篇文章最早发布于[我的博客园](http://www.cnblogs.com/ilvu/p/4002992.html)。\n\n文件和目录都有权限：r、w 、x，并且对于 拥有者（属主），同组用户，其他用户 都有对应的权限限制。\n* 对于文件：r代表读，可读取文件的内容；w代表写，可修改文件的内容；x代表执行，可以执行文件\n* 对于目录（记录文件清单）：r代表可以列出其中文件的相关信息；w代表目录下文件和目录的删除、重命名、新建；x代表可以以该目录作为工作目录\n \n总结：\n* 文件的访问及使用限制由文件本身的权限决定，但是文件名称的修改、文件本身的删除是由文件所在目录的w权限决定的\n* 文件的拥有着或者root可以修改文件或者目录的权限\n \n显然的，对于所有以文件的方式存在的命令，它们也有权限，所以，比如cd、ls等系统提供的命令也是有权限的，可以通过删除其x权限禁止用户使用该命令。\n用户使用系统：即用户通过一个程序去操作文件或档案，要顺利进行这一动作，得满足两个条件：\n\n* 对该程序文件的执行权限，如对 cd 、ls 等的x权限\n* 对要操作的目标文件的访问权限，如r，w\n\n举例：用户 dvid 进行操作：cat readme.md，首先 dvid 得具有 cat 程式的执行权限：x，其次 dvid 得具有 readme.md 的读权限：r。具体见下图\n{% qnimg 2016-08-06-linux-authority.png title:linux文件权限演示 alt:linux文件权限演示 'class:' %}\n","slug":"对linux文件权限的理解","published":1,"updated":"2016-08-06T02:58:45.000Z","_id":"cirfl2nhi0005v9s6vc1h62w0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>*nix系统中，文件的各种权限比较重要，以下内容，是通过学习《鸟哥的linxu私房菜》之后总结的内容，方便自己理解和记忆。这篇文章最早发布于<a href=\"http://www.cnblogs.com/ilvu/p/4002992.html\" target=\"_blank\" rel=\"external\">我的博客园</a>。</p>\n<p>文件和目录都有权限：r、w 、x，并且对于 拥有者（属主），同组用户，其他用户 都有对应的权限限制。</p>\n<ul>\n<li>对于文件：r代表读，可读取文件的内容；w代表写，可修改文件的内容；x代表执行，可以执行文件</li>\n<li>对于目录（记录文件清单）：r代表可以列出其中文件的相关信息；w代表目录下文件和目录的删除、重命名、新建；x代表可以以该目录作为工作目录</li>\n</ul>\n<p>总结：</p>\n<ul>\n<li>文件的访问及使用限制由文件本身的权限决定，但是文件名称的修改、文件本身的删除是由文件所在目录的w权限决定的</li>\n<li>文件的拥有着或者root可以修改文件或者目录的权限</li>\n</ul>\n<p>显然的，对于所有以文件的方式存在的命令，它们也有权限，所以，比如cd、ls等系统提供的命令也是有权限的，可以通过删除其x权限禁止用户使用该命令。<br>用户使用系统：即用户通过一个程序去操作文件或档案，要顺利进行这一动作，得满足两个条件：</p>\n<ul>\n<li>对该程序文件的执行权限，如对 cd 、ls 等的x权限</li>\n<li>对要操作的目标文件的访问权限，如r，w</li>\n</ul>\n<p>举例：用户 dvid 进行操作：cat readme.md，首先 dvid 得具有 cat 程式的执行权限：x，其次 dvid 得具有 readme.md 的读权限：r。具体见下图<br><img title=\"linux文件权限演示\" alt=\"linux文件权限演示\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/2016-08-06-linux-authority.png\"></p>\n","excerpt":"","more":"<p>*nix系统中，文件的各种权限比较重要，以下内容，是通过学习《鸟哥的linxu私房菜》之后总结的内容，方便自己理解和记忆。这篇文章最早发布于<a href=\"http://www.cnblogs.com/ilvu/p/4002992.html\">我的博客园</a>。</p>\n<p>文件和目录都有权限：r、w 、x，并且对于 拥有者（属主），同组用户，其他用户 都有对应的权限限制。</p>\n<ul>\n<li>对于文件：r代表读，可读取文件的内容；w代表写，可修改文件的内容；x代表执行，可以执行文件</li>\n<li>对于目录（记录文件清单）：r代表可以列出其中文件的相关信息；w代表目录下文件和目录的删除、重命名、新建；x代表可以以该目录作为工作目录</li>\n</ul>\n<p>总结：</p>\n<ul>\n<li>文件的访问及使用限制由文件本身的权限决定，但是文件名称的修改、文件本身的删除是由文件所在目录的w权限决定的</li>\n<li>文件的拥有着或者root可以修改文件或者目录的权限</li>\n</ul>\n<p>显然的，对于所有以文件的方式存在的命令，它们也有权限，所以，比如cd、ls等系统提供的命令也是有权限的，可以通过删除其x权限禁止用户使用该命令。<br>用户使用系统：即用户通过一个程序去操作文件或档案，要顺利进行这一动作，得满足两个条件：</p>\n<ul>\n<li>对该程序文件的执行权限，如对 cd 、ls 等的x权限</li>\n<li>对要操作的目标文件的访问权限，如r，w</li>\n</ul>\n<p>举例：用户 dvid 进行操作：cat readme.md，首先 dvid 得具有 cat 程式的执行权限：x，其次 dvid 得具有 readme.md 的读权限：r。具体见下图<br><img title=\"linux文件权限演示\" alt=\"linux文件权限演示\" src=\"http://7xp584.com1.z0.glb.clouddn.com/static/images/2016-08-06-linux-authority.png\"></p>\n"},{"title":"AnglarJS Tips（持续更新）","date":"2016-05-28T09:16:19.000Z","_content":"\n用AngularJS的人越来越多了，这里有一些重要的问题，可以作为对AngularJS的考察点。\n以下内容，针对1.x版本。\n\n1.AngularJS实现双向绑定的原理是什么？\n2.$scope上$apply的作用是什么，什么时候需要你手动调用？\n3.使用AngularJS的好处是什么？\n\n以上问题，实际涉及到AngularJS的核心原理，能否清楚的回答，直接反映出你对AngularJS了解程度的深浅。\n\n<!-- more --> \n\nAngularJS作为一个MVC框架，一个很重要的功能就是数据绑定，即模型（model，具体体现为$scope对象）和视图（view，具体体现为指令模板）之间的数据同步，双向绑定呢，既有从模型到视图，也有视图到模型。我们使用ng-model这个指令来说明双向绑定的核心原理。\n比如模板 &lt;input ng-model=\"model\" /&gt;， 数据从视图到模型这个方向，ng-model指令通过在input这个元素上添加事件监听（change），当input的 值发生变化的时候，新值被写入$scope.model属性；对于数据从模型到视图这个方向，ng-model指令在$scope上进行了数据监听($watch)，当监测到$scope.model被修改（比如ajax从后台获取数据），那么这个值就会被写入input的value。这就是双向绑定的整个过程。\n\n经过上面的讨论，对于问题1，它的答案是：***数据监听，视图到模型方向通过给模板中的DOM元素添加事件监听（典型的是change）完成，模型到视图方向通过给模型$scope添加属性监听（$watch）实现，如此就可以实现数据在视图和模型之间的双向绑定了。***\n\n上面说到，模型到视图是通过在$scope上添加属性监听（$watch）实现的，那这里有个问题，这个事件监听是如何来实现监测对的呢，它是如何感知到$scope上属性的变化的呢，具体如何实现？视图到模型好说，最终可以通过DOM事件实现，那模型上呢？模型说到底就是一个JavaScript对象，它如何监测自己的变化？\n在AngularJS的实现中，采用了一种称之为***“脏数据检测”($digest，也有翻译“脏值检查”)***的机制，即通过$scope的$watch方法，添加好多的检测表达式，以及变化时候的回调，然后在触发“脏数据检测”的时候，逐一执行这些检测表达式，比较这些表达式的值和上一次执行时候的值是否相同来确定$scope是否发生了变化，如果变化了，执行相应的回调方法，这样就能够对$scope的变化做出反应。那好，这里重点是它的实现方式，很显然，$scope还需要被触发去执行这个“脏数据检测”的过程，那么这个检测过程是什么时候被执行的呢？这就是AngularJS的核心原理了。\n现在来说下“脏数据检测”的触发过程。“脏数据检测”是发生在每一个具体的$scope对象上的，对于某个$scope而言，进行“脏数据检测”实际上就是执行该$scope上的$digest方法。$scope上还有一个方法就是$apply,$apply是接受一个表达式，并在$scope上执行，最后会调用$digest，即触发“脏数据检测”。大多数时候，AngularJS会自行触发这个“脏数据检测”的过程，并不需要我们手动去调用$digest或者$apply，这也就是为什么我们在使用ng-model或者$http的时候，视图和模型已经自动关联的原因。\n以下场景AngularJS会自动的调用$apply:\n* angular启动的时候\n* angular事件绑定，如ng-click，ng-dblclick，ng-mousedown，ng-mouseup，ng-mouseover，ng-keydown等等\n* input，textarea, select等表单元素（实际上input，textarea，select是angular内部定义的指令，angluar中定义的指令可以有多种使用方式，这种就是“E”）\n* angular的部分内置服务，如 $http，$timeout等\n\n经过上面的讨论，我们来回答问题2。***$apply是$scope上的一个方法，作用是在$scope上执行一个表达式，然后调用$digest，触发“脏数据检测”过程，实现模型和视图间的同步以及更新。除了上面所述的几种AngularJS会自动触发“脏数据检测”的场景，如果你在混用jQuery绑定DOM事件，调用外部的回调方法等等，这时候就需要手动调用$apply了。***\n\n对于问题3，主要归纳下，就是：（1）AngularJS是一个MVC模式的框架，你可以分离控制逻辑、数据和渲染过程，各个部分职责明确，更加灵活；（2）AngularJS提供了指令这种强大的方式，让你可以扩展HTML，封装功能强大的独立组件；(3)AngularJS有模块的概念，可以将不同的部分放在不同的模块里面，结构清晰；（4）AngularJS提供了依赖注入的功能，让你可以方便地加载需要的服务或者模块等，并且这让测试变得很容易。\n\n上述涉及到AngularJS核心的东西，大家可以查看源码进行对照（针对1.x版本）。这里附上一个stackoverflow上的链接：[how does the binding and digesting work in AngularJS?](http://stackoverflow.com/questions/12463902/how-does-the-binding-and-digesting-work-in-angularjs)，以示对照。","source":"_posts/AnglarJS-Tips.md","raw":"title: AnglarJS Tips（持续更新）\ndate: 2016-05-28 17:16:19\ncategories: [JavaScript,AngularJS]\ntags: [AngularJS,javascript,双向绑定,脏数据检测]\n---\n\n用AngularJS的人越来越多了，这里有一些重要的问题，可以作为对AngularJS的考察点。\n以下内容，针对1.x版本。\n\n1.AngularJS实现双向绑定的原理是什么？\n2.$scope上$apply的作用是什么，什么时候需要你手动调用？\n3.使用AngularJS的好处是什么？\n\n以上问题，实际涉及到AngularJS的核心原理，能否清楚的回答，直接反映出你对AngularJS了解程度的深浅。\n\n<!-- more --> \n\nAngularJS作为一个MVC框架，一个很重要的功能就是数据绑定，即模型（model，具体体现为$scope对象）和视图（view，具体体现为指令模板）之间的数据同步，双向绑定呢，既有从模型到视图，也有视图到模型。我们使用ng-model这个指令来说明双向绑定的核心原理。\n比如模板 &lt;input ng-model=\"model\" /&gt;， 数据从视图到模型这个方向，ng-model指令通过在input这个元素上添加事件监听（change），当input的 值发生变化的时候，新值被写入$scope.model属性；对于数据从模型到视图这个方向，ng-model指令在$scope上进行了数据监听($watch)，当监测到$scope.model被修改（比如ajax从后台获取数据），那么这个值就会被写入input的value。这就是双向绑定的整个过程。\n\n经过上面的讨论，对于问题1，它的答案是：***数据监听，视图到模型方向通过给模板中的DOM元素添加事件监听（典型的是change）完成，模型到视图方向通过给模型$scope添加属性监听（$watch）实现，如此就可以实现数据在视图和模型之间的双向绑定了。***\n\n上面说到，模型到视图是通过在$scope上添加属性监听（$watch）实现的，那这里有个问题，这个事件监听是如何来实现监测对的呢，它是如何感知到$scope上属性的变化的呢，具体如何实现？视图到模型好说，最终可以通过DOM事件实现，那模型上呢？模型说到底就是一个JavaScript对象，它如何监测自己的变化？\n在AngularJS的实现中，采用了一种称之为***“脏数据检测”($digest，也有翻译“脏值检查”)***的机制，即通过$scope的$watch方法，添加好多的检测表达式，以及变化时候的回调，然后在触发“脏数据检测”的时候，逐一执行这些检测表达式，比较这些表达式的值和上一次执行时候的值是否相同来确定$scope是否发生了变化，如果变化了，执行相应的回调方法，这样就能够对$scope的变化做出反应。那好，这里重点是它的实现方式，很显然，$scope还需要被触发去执行这个“脏数据检测”的过程，那么这个检测过程是什么时候被执行的呢？这就是AngularJS的核心原理了。\n现在来说下“脏数据检测”的触发过程。“脏数据检测”是发生在每一个具体的$scope对象上的，对于某个$scope而言，进行“脏数据检测”实际上就是执行该$scope上的$digest方法。$scope上还有一个方法就是$apply,$apply是接受一个表达式，并在$scope上执行，最后会调用$digest，即触发“脏数据检测”。大多数时候，AngularJS会自行触发这个“脏数据检测”的过程，并不需要我们手动去调用$digest或者$apply，这也就是为什么我们在使用ng-model或者$http的时候，视图和模型已经自动关联的原因。\n以下场景AngularJS会自动的调用$apply:\n* angular启动的时候\n* angular事件绑定，如ng-click，ng-dblclick，ng-mousedown，ng-mouseup，ng-mouseover，ng-keydown等等\n* input，textarea, select等表单元素（实际上input，textarea，select是angular内部定义的指令，angluar中定义的指令可以有多种使用方式，这种就是“E”）\n* angular的部分内置服务，如 $http，$timeout等\n\n经过上面的讨论，我们来回答问题2。***$apply是$scope上的一个方法，作用是在$scope上执行一个表达式，然后调用$digest，触发“脏数据检测”过程，实现模型和视图间的同步以及更新。除了上面所述的几种AngularJS会自动触发“脏数据检测”的场景，如果你在混用jQuery绑定DOM事件，调用外部的回调方法等等，这时候就需要手动调用$apply了。***\n\n对于问题3，主要归纳下，就是：（1）AngularJS是一个MVC模式的框架，你可以分离控制逻辑、数据和渲染过程，各个部分职责明确，更加灵活；（2）AngularJS提供了指令这种强大的方式，让你可以扩展HTML，封装功能强大的独立组件；(3)AngularJS有模块的概念，可以将不同的部分放在不同的模块里面，结构清晰；（4）AngularJS提供了依赖注入的功能，让你可以方便地加载需要的服务或者模块等，并且这让测试变得很容易。\n\n上述涉及到AngularJS核心的东西，大家可以查看源码进行对照（针对1.x版本）。这里附上一个stackoverflow上的链接：[how does the binding and digesting work in AngularJS?](http://stackoverflow.com/questions/12463902/how-does-the-binding-and-digesting-work-in-angularjs)，以示对照。","slug":"AnglarJS-Tips","published":1,"updated":"2016-07-31T04:48:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirfl2nhp0006v9s6z0xbzrjh","content":"<p>用AngularJS的人越来越多了，这里有一些重要的问题，可以作为对AngularJS的考察点。<br>以下内容，针对1.x版本。</p>\n<p>1.AngularJS实现双向绑定的原理是什么？<br>2.$scope上$apply的作用是什么，什么时候需要你手动调用？<br>3.使用AngularJS的好处是什么？</p>\n<p>以上问题，实际涉及到AngularJS的核心原理，能否清楚的回答，直接反映出你对AngularJS了解程度的深浅。</p>\n<a id=\"more\"></a> \n<p>AngularJS作为一个MVC框架，一个很重要的功能就是数据绑定，即模型（model，具体体现为$scope对象）和视图（view，具体体现为指令模板）之间的数据同步，双向绑定呢，既有从模型到视图，也有视图到模型。我们使用ng-model这个指令来说明双向绑定的核心原理。<br>比如模板 &lt;input ng-model=”model” /&gt;， 数据从视图到模型这个方向，ng-model指令通过在input这个元素上添加事件监听（change），当input的 值发生变化的时候，新值被写入$scope.model属性；对于数据从模型到视图这个方向，ng-model指令在$scope上进行了数据监听($watch)，当监测到$scope.model被修改（比如ajax从后台获取数据），那么这个值就会被写入input的value。这就是双向绑定的整个过程。</p>\n<p>经过上面的讨论，对于问题1，它的答案是：<strong><em>数据监听，视图到模型方向通过给模板中的DOM元素添加事件监听（典型的是change）完成，模型到视图方向通过给模型$scope添加属性监听（$watch）实现，如此就可以实现数据在视图和模型之间的双向绑定了。</em></strong></p>\n<p>上面说到，模型到视图是通过在$scope上添加属性监听（$watch）实现的，那这里有个问题，这个事件监听是如何来实现监测对的呢，它是如何感知到$scope上属性的变化的呢，具体如何实现？视图到模型好说，最终可以通过DOM事件实现，那模型上呢？模型说到底就是一个JavaScript对象，它如何监测自己的变化？<br>在AngularJS的实现中，采用了一种称之为<strong><em>“脏数据检测”($digest，也有翻译“脏值检查”)</em></strong>的机制，即通过$scope的$watch方法，添加好多的检测表达式，以及变化时候的回调，然后在触发“脏数据检测”的时候，逐一执行这些检测表达式，比较这些表达式的值和上一次执行时候的值是否相同来确定$scope是否发生了变化，如果变化了，执行相应的回调方法，这样就能够对$scope的变化做出反应。那好，这里重点是它的实现方式，很显然，$scope还需要被触发去执行这个“脏数据检测”的过程，那么这个检测过程是什么时候被执行的呢？这就是AngularJS的核心原理了。<br>现在来说下“脏数据检测”的触发过程。“脏数据检测”是发生在每一个具体的$scope对象上的，对于某个$scope而言，进行“脏数据检测”实际上就是执行该$scope上的$digest方法。$scope上还有一个方法就是$apply,$apply是接受一个表达式，并在$scope上执行，最后会调用$digest，即触发“脏数据检测”。大多数时候，AngularJS会自行触发这个“脏数据检测”的过程，并不需要我们手动去调用$digest或者$apply，这也就是为什么我们在使用ng-model或者$http的时候，视图和模型已经自动关联的原因。<br>以下场景AngularJS会自动的调用$apply:</p>\n<ul>\n<li>angular启动的时候</li>\n<li>angular事件绑定，如ng-click，ng-dblclick，ng-mousedown，ng-mouseup，ng-mouseover，ng-keydown等等</li>\n<li>input，textarea, select等表单元素（实际上input，textarea，select是angular内部定义的指令，angluar中定义的指令可以有多种使用方式，这种就是“E”）</li>\n<li>angular的部分内置服务，如 $http，$timeout等</li>\n</ul>\n<p>经过上面的讨论，我们来回答问题2。<strong><em>$apply是$scope上的一个方法，作用是在$scope上执行一个表达式，然后调用$digest，触发“脏数据检测”过程，实现模型和视图间的同步以及更新。除了上面所述的几种AngularJS会自动触发“脏数据检测”的场景，如果你在混用jQuery绑定DOM事件，调用外部的回调方法等等，这时候就需要手动调用$apply了。</em></strong></p>\n<p>对于问题3，主要归纳下，就是：（1）AngularJS是一个MVC模式的框架，你可以分离控制逻辑、数据和渲染过程，各个部分职责明确，更加灵活；（2）AngularJS提供了指令这种强大的方式，让你可以扩展HTML，封装功能强大的独立组件；(3)AngularJS有模块的概念，可以将不同的部分放在不同的模块里面，结构清晰；（4）AngularJS提供了依赖注入的功能，让你可以方便地加载需要的服务或者模块等，并且这让测试变得很容易。</p>\n<p>上述涉及到AngularJS核心的东西，大家可以查看源码进行对照（针对1.x版本）。这里附上一个stackoverflow上的链接：<a href=\"http://stackoverflow.com/questions/12463902/how-does-the-binding-and-digesting-work-in-angularjs\" target=\"_blank\" rel=\"external\">how does the binding and digesting work in AngularJS?</a>，以示对照。</p>\n","excerpt":"<p>用AngularJS的人越来越多了，这里有一些重要的问题，可以作为对AngularJS的考察点。<br>以下内容，针对1.x版本。</p>\n<p>1.AngularJS实现双向绑定的原理是什么？<br>2.$scope上$apply的作用是什么，什么时候需要你手动调用？<br>3.使用AngularJS的好处是什么？</p>\n<p>以上问题，实际涉及到AngularJS的核心原理，能否清楚的回答，直接反映出你对AngularJS了解程度的深浅。</p>","more":"<p>AngularJS作为一个MVC框架，一个很重要的功能就是数据绑定，即模型（model，具体体现为$scope对象）和视图（view，具体体现为指令模板）之间的数据同步，双向绑定呢，既有从模型到视图，也有视图到模型。我们使用ng-model这个指令来说明双向绑定的核心原理。<br>比如模板 &lt;input ng-model=”model” /&gt;， 数据从视图到模型这个方向，ng-model指令通过在input这个元素上添加事件监听（change），当input的 值发生变化的时候，新值被写入$scope.model属性；对于数据从模型到视图这个方向，ng-model指令在$scope上进行了数据监听($watch)，当监测到$scope.model被修改（比如ajax从后台获取数据），那么这个值就会被写入input的value。这就是双向绑定的整个过程。</p>\n<p>经过上面的讨论，对于问题1，它的答案是：<strong><em>数据监听，视图到模型方向通过给模板中的DOM元素添加事件监听（典型的是change）完成，模型到视图方向通过给模型$scope添加属性监听（$watch）实现，如此就可以实现数据在视图和模型之间的双向绑定了。</em></strong></p>\n<p>上面说到，模型到视图是通过在$scope上添加属性监听（$watch）实现的，那这里有个问题，这个事件监听是如何来实现监测对的呢，它是如何感知到$scope上属性的变化的呢，具体如何实现？视图到模型好说，最终可以通过DOM事件实现，那模型上呢？模型说到底就是一个JavaScript对象，它如何监测自己的变化？<br>在AngularJS的实现中，采用了一种称之为<strong><em>“脏数据检测”($digest，也有翻译“脏值检查”)</em></strong>的机制，即通过$scope的$watch方法，添加好多的检测表达式，以及变化时候的回调，然后在触发“脏数据检测”的时候，逐一执行这些检测表达式，比较这些表达式的值和上一次执行时候的值是否相同来确定$scope是否发生了变化，如果变化了，执行相应的回调方法，这样就能够对$scope的变化做出反应。那好，这里重点是它的实现方式，很显然，$scope还需要被触发去执行这个“脏数据检测”的过程，那么这个检测过程是什么时候被执行的呢？这就是AngularJS的核心原理了。<br>现在来说下“脏数据检测”的触发过程。“脏数据检测”是发生在每一个具体的$scope对象上的，对于某个$scope而言，进行“脏数据检测”实际上就是执行该$scope上的$digest方法。$scope上还有一个方法就是$apply,$apply是接受一个表达式，并在$scope上执行，最后会调用$digest，即触发“脏数据检测”。大多数时候，AngularJS会自行触发这个“脏数据检测”的过程，并不需要我们手动去调用$digest或者$apply，这也就是为什么我们在使用ng-model或者$http的时候，视图和模型已经自动关联的原因。<br>以下场景AngularJS会自动的调用$apply:</p>\n<ul>\n<li>angular启动的时候</li>\n<li>angular事件绑定，如ng-click，ng-dblclick，ng-mousedown，ng-mouseup，ng-mouseover，ng-keydown等等</li>\n<li>input，textarea, select等表单元素（实际上input，textarea，select是angular内部定义的指令，angluar中定义的指令可以有多种使用方式，这种就是“E”）</li>\n<li>angular的部分内置服务，如 $http，$timeout等</li>\n</ul>\n<p>经过上面的讨论，我们来回答问题2。<strong><em>$apply是$scope上的一个方法，作用是在$scope上执行一个表达式，然后调用$digest，触发“脏数据检测”过程，实现模型和视图间的同步以及更新。除了上面所述的几种AngularJS会自动触发“脏数据检测”的场景，如果你在混用jQuery绑定DOM事件，调用外部的回调方法等等，这时候就需要手动调用$apply了。</em></strong></p>\n<p>对于问题3，主要归纳下，就是：（1）AngularJS是一个MVC模式的框架，你可以分离控制逻辑、数据和渲染过程，各个部分职责明确，更加灵活；（2）AngularJS提供了指令这种强大的方式，让你可以扩展HTML，封装功能强大的独立组件；(3)AngularJS有模块的概念，可以将不同的部分放在不同的模块里面，结构清晰；（4）AngularJS提供了依赖注入的功能，让你可以方便地加载需要的服务或者模块等，并且这让测试变得很容易。</p>\n<p>上述涉及到AngularJS核心的东西，大家可以查看源码进行对照（针对1.x版本）。这里附上一个stackoverflow上的链接：<a href=\"http://stackoverflow.com/questions/12463902/how-does-the-binding-and-digesting-work-in-angularjs\">how does the binding and digesting work in AngularJS?</a>，以示对照。</p>"},{"title":"阳光正好","date":"2016-06-26T06:34:13.000Z","_content":"\n你所知道的一切，最终都会成为你的束缚。你的知识，决定了你会做出何种行为，当你的知识不够全面，不够客观，那么你容易做出自己觉得对的，但实际上不怎么正确的决定。\n我们读书，或者旅行，或者和别人交流，或者反思，都可以让我们更好地认识世界，认识人生，认识自己，让自己具备全面的、客观的知识，从而做出正确的决定。\n希望最后的我们，有信仰，有敬畏，有坚持，有原则，相信美好，选择善良，认真地生活。\n","source":"_posts/阳光正好.md","raw":"title: 阳光正好\ndate: 2016-06-26 14:34:13\ncategories: [随笔]\ntags: [随笔,随想]\n---\n\n你所知道的一切，最终都会成为你的束缚。你的知识，决定了你会做出何种行为，当你的知识不够全面，不够客观，那么你容易做出自己觉得对的，但实际上不怎么正确的决定。\n我们读书，或者旅行，或者和别人交流，或者反思，都可以让我们更好地认识世界，认识人生，认识自己，让自己具备全面的、客观的知识，从而做出正确的决定。\n希望最后的我们，有信仰，有敬畏，有坚持，有原则，相信美好，选择善良，认真地生活。\n","slug":"阳光正好","published":1,"updated":"2016-07-31T04:48:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirfl2nhs0008v9s6rkmooryq","content":"<p>你所知道的一切，最终都会成为你的束缚。你的知识，决定了你会做出何种行为，当你的知识不够全面，不够客观，那么你容易做出自己觉得对的，但实际上不怎么正确的决定。<br>我们读书，或者旅行，或者和别人交流，或者反思，都可以让我们更好地认识世界，认识人生，认识自己，让自己具备全面的、客观的知识，从而做出正确的决定。<br>希望最后的我们，有信仰，有敬畏，有坚持，有原则，相信美好，选择善良，认真地生活。</p>\n","excerpt":"","more":"<p>你所知道的一切，最终都会成为你的束缚。你的知识，决定了你会做出何种行为，当你的知识不够全面，不够客观，那么你容易做出自己觉得对的，但实际上不怎么正确的决定。<br>我们读书，或者旅行，或者和别人交流，或者反思，都可以让我们更好地认识世界，认识人生，认识自己，让自己具备全面的、客观的知识，从而做出正确的决定。<br>希望最后的我们，有信仰，有敬畏，有坚持，有原则，相信美好，选择善良，认真地生活。</p>\n"},{"title":"随想","date":"2016-05-23T14:19:10.000Z","_content":"\n应该写一些东西了，总是会有几天，感悟颇多。\n\n做事情应该面向结果，而不是面向过程。很多事情不是你做了就到此为止了，而是要看结果如何的。就比如一段代码，你觉得写完了ok了，但是你有没有在代码中留下一些坑呢，结果是否达到预期呢？这是对结果负责。更进一步，如果你做完之后，能够反思整个过程，是否哪里可以改进呢？这是对自己的提高。\n\n\n反思是一种非常好的改进自我的方式，小到具体技巧的优化，大到整个人生思想水平的提高。这绝对可以让你的成长速度加倍，你可以用一年的时间收获他们两年的经验，你可以对同样的错误举一反三，绝不再犯。\n\n思维方式真的能决定一个人的层次，然后决定你的生活。有些东西只要你意识到了，那么它就会对你的人生产生巨大的作用。","source":"_posts/随想2016-05-23.md","raw":"title: 随想\ndate: 2016-05-23 22:19:10\ncategories: [随笔]\ntags: [随笔,随想]\n---\n\n应该写一些东西了，总是会有几天，感悟颇多。\n\n做事情应该面向结果，而不是面向过程。很多事情不是你做了就到此为止了，而是要看结果如何的。就比如一段代码，你觉得写完了ok了，但是你有没有在代码中留下一些坑呢，结果是否达到预期呢？这是对结果负责。更进一步，如果你做完之后，能够反思整个过程，是否哪里可以改进呢？这是对自己的提高。\n\n\n反思是一种非常好的改进自我的方式，小到具体技巧的优化，大到整个人生思想水平的提高。这绝对可以让你的成长速度加倍，你可以用一年的时间收获他们两年的经验，你可以对同样的错误举一反三，绝不再犯。\n\n思维方式真的能决定一个人的层次，然后决定你的生活。有些东西只要你意识到了，那么它就会对你的人生产生巨大的作用。","slug":"随想2016-05-23","published":1,"updated":"2016-07-31T04:48:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirfl2nhv000av9s6oe7uu9md","content":"<p>应该写一些东西了，总是会有几天，感悟颇多。</p>\n<p>做事情应该面向结果，而不是面向过程。很多事情不是你做了就到此为止了，而是要看结果如何的。就比如一段代码，你觉得写完了ok了，但是你有没有在代码中留下一些坑呢，结果是否达到预期呢？这是对结果负责。更进一步，如果你做完之后，能够反思整个过程，是否哪里可以改进呢？这是对自己的提高。</p>\n<p>反思是一种非常好的改进自我的方式，小到具体技巧的优化，大到整个人生思想水平的提高。这绝对可以让你的成长速度加倍，你可以用一年的时间收获他们两年的经验，你可以对同样的错误举一反三，绝不再犯。</p>\n<p>思维方式真的能决定一个人的层次，然后决定你的生活。有些东西只要你意识到了，那么它就会对你的人生产生巨大的作用。</p>\n","excerpt":"","more":"<p>应该写一些东西了，总是会有几天，感悟颇多。</p>\n<p>做事情应该面向结果，而不是面向过程。很多事情不是你做了就到此为止了，而是要看结果如何的。就比如一段代码，你觉得写完了ok了，但是你有没有在代码中留下一些坑呢，结果是否达到预期呢？这是对结果负责。更进一步，如果你做完之后，能够反思整个过程，是否哪里可以改进呢？这是对自己的提高。</p>\n<p>反思是一种非常好的改进自我的方式，小到具体技巧的优化，大到整个人生思想水平的提高。这绝对可以让你的成长速度加倍，你可以用一年的时间收获他们两年的经验，你可以对同样的错误举一反三，绝不再犯。</p>\n<p>思维方式真的能决定一个人的层次，然后决定你的生活。有些东西只要你意识到了，那么它就会对你的人生产生巨大的作用。</p>\n"},{"title":"angular的DOM编译过程","date":"2015-12-12T16:00:00.000Z","_content":"angular的DOM编译过程总的来说，是编译DOM，生成一个复合链接函数，然后传入scope作为参数，执行该链接函数，在scope和实际的DOM之间建立联系，编译过程结束。\n下面主要来说一下编译DOM并生成链接函数的过程，以下分析基于[angular-1.3.0源码](https://github.com/Gpia/temp-data/blob/master/javascript/lib/angular-1.3.0.js)，由于代码很长，不在此贴出，可点击此链接查看，涉及到的内容主要从6094行开始。\n编译DOM并生成链接函数的过程是由一个叫做compileNodes的内部方法完成的，该方法从一个指定的待编译节点列表开始编译，对于从document元素上启动的angular应用，那么待编译节点列表从一个只包含document元素（内部使用的是document的包装类型，即jqLite(document)）的数组开始，形如 [jqLite(document)]。\n\n<!-- more --> \n\n一.具体来说compileNodes的过程：\n\n1.对于待编译节点列表nodeList中的每一个节点node，收集它上面的指令（collectDirectives），然后对该节点node应用指令（applyDirectivesToNode），调用applyDirectivesToNode方法会返回一个当前node的链接函数nodeLinkFn；接着，如果有子节点，则重复步骤1，并传入子节点列表childNodes作为参数，生成childNodeLinkFn。\n2.将nodeLinkFn和childLinkFn加入一个linkFns数组，保存（linkFns.push(i, nodeLinkFn, childLinkFn)，i是node在nodeList中的索引）即linkFns中包含了待编译节点列表中每一个node的nodeLinkFn和childLinkFn。\n3.返回一个复合链接函数compositeLinkFn。\n\n通过以上3步compileNodes已经执行结束，此过程中DOM中指令的编译过程已经完成，即已经完成了指令的变换（applyDirectivesToNode方法），比如用指令的模板替换指令的占位元素。\n\n还通过上述步骤，compileNodes返回的是一个复合链接函数compositeLinkFn，applyDirectivesToNode返回的是一个普通的链接函数nodeLinkFn，\n复合链接函数用于执行当前节点node的nodeLinkFn和当前节点子节点的childLinkFn，其中由于childLinkFn是由compileNodes的递归调用返回的，所以它是一个复合链接函数，而当前节点的nodeLinkFn是由applyDirectivesToNode返回的，是一个普通的链接函数。即compositeLinkFn的执行到最后都是nodeLinkFn的执行。\n\n实际上，上述步骤3返回的链接函数构成了一个闭包，它在执行时能够访问到上面的linkFns。\n\n二.上面步骤3返回的的复合链接函数的执行过程（传入参数：scope,nodeList，rootElement。）\n\n1.遍历linkFns，每一次遍历，都取出一个节点索引i，nodeLinkFn（普通链接函数）和childLinkFn（复合链接函数），通过nodeList[i]获取nodeLinkFn对应的节点node。\n2.对于当前节点node，\n  如果有nodeLinkFn，则首先根据nodeLinkFn包含的信息nodeLinkFn.scope生成恰当的子scope，如果有子scope，则childScope=scope.$new()，否则childScope=scope，然后执行nodeLinkFn，即nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);\n  如果没有nodeLinkFn，但有childLinkFn，则执行childLinkFn，即回到步骤1，继续执行子复合链接函数： childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn)。\n3.执行结束。\n\n重点说明：compileNodes方法处理的是模板DOM（对应compileNode），nodeLinkFn方法执行时是针对已经是编译后的DOM（对应linkNode），那么问题来了，linkFns数组中保存的node索引i，是在模板DOM中的顺序，而compositeLinkFn执行时却根据它从编译后的DOM中取node，对应不上？首先，对于有模板的指令，模板只能有一个根节点，即compileNode和linkNode是一一对应的，对于没有模板的指令，则compileNode===linkNode。再关键在于applyDirectivesToNode方法，该方法处理compileNode并最终返回了一个能够处理linkNode的nodeLinkFn，所以在nodeLinkFn在 最后执行的时候，既能够访问到compileNode（闭包），也能够访问到其该compileNode在变换之后对应的linkNode（参数），它在内部做了处理。\n\n由上面我们知道，复合链接函数compileLinkFn的执行最后都是nodeLinkFn的执行，而nodeLinkFn是由applyDirectivesToNode方法返回的，顾名思义，它将指令应用到节点，完成了模板DOM到最终DOM的转换。\n\n三.applyDirectivesToNode的执行过程(待完成)\n\n四.nodeLinkFn的执行过程(待完成)","source":"_posts/angular-compile.md","raw":"title: angular的DOM编译过程\ncategories: [JavaScript,AngularJS]\ntags: [AngularJS,javascript,compile,编译]\ndate: 2015/12/13\n---\nangular的DOM编译过程总的来说，是编译DOM，生成一个复合链接函数，然后传入scope作为参数，执行该链接函数，在scope和实际的DOM之间建立联系，编译过程结束。\n下面主要来说一下编译DOM并生成链接函数的过程，以下分析基于[angular-1.3.0源码](https://github.com/Gpia/temp-data/blob/master/javascript/lib/angular-1.3.0.js)，由于代码很长，不在此贴出，可点击此链接查看，涉及到的内容主要从6094行开始。\n编译DOM并生成链接函数的过程是由一个叫做compileNodes的内部方法完成的，该方法从一个指定的待编译节点列表开始编译，对于从document元素上启动的angular应用，那么待编译节点列表从一个只包含document元素（内部使用的是document的包装类型，即jqLite(document)）的数组开始，形如 [jqLite(document)]。\n\n<!-- more --> \n\n一.具体来说compileNodes的过程：\n\n1.对于待编译节点列表nodeList中的每一个节点node，收集它上面的指令（collectDirectives），然后对该节点node应用指令（applyDirectivesToNode），调用applyDirectivesToNode方法会返回一个当前node的链接函数nodeLinkFn；接着，如果有子节点，则重复步骤1，并传入子节点列表childNodes作为参数，生成childNodeLinkFn。\n2.将nodeLinkFn和childLinkFn加入一个linkFns数组，保存（linkFns.push(i, nodeLinkFn, childLinkFn)，i是node在nodeList中的索引）即linkFns中包含了待编译节点列表中每一个node的nodeLinkFn和childLinkFn。\n3.返回一个复合链接函数compositeLinkFn。\n\n通过以上3步compileNodes已经执行结束，此过程中DOM中指令的编译过程已经完成，即已经完成了指令的变换（applyDirectivesToNode方法），比如用指令的模板替换指令的占位元素。\n\n还通过上述步骤，compileNodes返回的是一个复合链接函数compositeLinkFn，applyDirectivesToNode返回的是一个普通的链接函数nodeLinkFn，\n复合链接函数用于执行当前节点node的nodeLinkFn和当前节点子节点的childLinkFn，其中由于childLinkFn是由compileNodes的递归调用返回的，所以它是一个复合链接函数，而当前节点的nodeLinkFn是由applyDirectivesToNode返回的，是一个普通的链接函数。即compositeLinkFn的执行到最后都是nodeLinkFn的执行。\n\n实际上，上述步骤3返回的链接函数构成了一个闭包，它在执行时能够访问到上面的linkFns。\n\n二.上面步骤3返回的的复合链接函数的执行过程（传入参数：scope,nodeList，rootElement。）\n\n1.遍历linkFns，每一次遍历，都取出一个节点索引i，nodeLinkFn（普通链接函数）和childLinkFn（复合链接函数），通过nodeList[i]获取nodeLinkFn对应的节点node。\n2.对于当前节点node，\n  如果有nodeLinkFn，则首先根据nodeLinkFn包含的信息nodeLinkFn.scope生成恰当的子scope，如果有子scope，则childScope=scope.$new()，否则childScope=scope，然后执行nodeLinkFn，即nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);\n  如果没有nodeLinkFn，但有childLinkFn，则执行childLinkFn，即回到步骤1，继续执行子复合链接函数： childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn)。\n3.执行结束。\n\n重点说明：compileNodes方法处理的是模板DOM（对应compileNode），nodeLinkFn方法执行时是针对已经是编译后的DOM（对应linkNode），那么问题来了，linkFns数组中保存的node索引i，是在模板DOM中的顺序，而compositeLinkFn执行时却根据它从编译后的DOM中取node，对应不上？首先，对于有模板的指令，模板只能有一个根节点，即compileNode和linkNode是一一对应的，对于没有模板的指令，则compileNode===linkNode。再关键在于applyDirectivesToNode方法，该方法处理compileNode并最终返回了一个能够处理linkNode的nodeLinkFn，所以在nodeLinkFn在 最后执行的时候，既能够访问到compileNode（闭包），也能够访问到其该compileNode在变换之后对应的linkNode（参数），它在内部做了处理。\n\n由上面我们知道，复合链接函数compileLinkFn的执行最后都是nodeLinkFn的执行，而nodeLinkFn是由applyDirectivesToNode方法返回的，顾名思义，它将指令应用到节点，完成了模板DOM到最终DOM的转换。\n\n三.applyDirectivesToNode的执行过程(待完成)\n\n四.nodeLinkFn的执行过程(待完成)","slug":"angular-compile","published":1,"updated":"2016-07-31T04:48:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirfl2nhy000bv9s6r9q0laah","content":"<p>angular的DOM编译过程总的来说，是编译DOM，生成一个复合链接函数，然后传入scope作为参数，执行该链接函数，在scope和实际的DOM之间建立联系，编译过程结束。<br>下面主要来说一下编译DOM并生成链接函数的过程，以下分析基于<a href=\"https://github.com/Gpia/temp-data/blob/master/javascript/lib/angular-1.3.0.js\" target=\"_blank\" rel=\"external\">angular-1.3.0源码</a>，由于代码很长，不在此贴出，可点击此链接查看，涉及到的内容主要从6094行开始。<br>编译DOM并生成链接函数的过程是由一个叫做compileNodes的内部方法完成的，该方法从一个指定的待编译节点列表开始编译，对于从document元素上启动的angular应用，那么待编译节点列表从一个只包含document元素（内部使用的是document的包装类型，即jqLite(document)）的数组开始，形如 [jqLite(document)]。</p>\n<a id=\"more\"></a> \n<p>一.具体来说compileNodes的过程：</p>\n<p>1.对于待编译节点列表nodeList中的每一个节点node，收集它上面的指令（collectDirectives），然后对该节点node应用指令（applyDirectivesToNode），调用applyDirectivesToNode方法会返回一个当前node的链接函数nodeLinkFn；接着，如果有子节点，则重复步骤1，并传入子节点列表childNodes作为参数，生成childNodeLinkFn。<br>2.将nodeLinkFn和childLinkFn加入一个linkFns数组，保存（linkFns.push(i, nodeLinkFn, childLinkFn)，i是node在nodeList中的索引）即linkFns中包含了待编译节点列表中每一个node的nodeLinkFn和childLinkFn。<br>3.返回一个复合链接函数compositeLinkFn。</p>\n<p>通过以上3步compileNodes已经执行结束，此过程中DOM中指令的编译过程已经完成，即已经完成了指令的变换（applyDirectivesToNode方法），比如用指令的模板替换指令的占位元素。</p>\n<p>还通过上述步骤，compileNodes返回的是一个复合链接函数compositeLinkFn，applyDirectivesToNode返回的是一个普通的链接函数nodeLinkFn，<br>复合链接函数用于执行当前节点node的nodeLinkFn和当前节点子节点的childLinkFn，其中由于childLinkFn是由compileNodes的递归调用返回的，所以它是一个复合链接函数，而当前节点的nodeLinkFn是由applyDirectivesToNode返回的，是一个普通的链接函数。即compositeLinkFn的执行到最后都是nodeLinkFn的执行。</p>\n<p>实际上，上述步骤3返回的链接函数构成了一个闭包，它在执行时能够访问到上面的linkFns。</p>\n<p>二.上面步骤3返回的的复合链接函数的执行过程（传入参数：scope,nodeList，rootElement。）</p>\n<p>1.遍历linkFns，每一次遍历，都取出一个节点索引i，nodeLinkFn（普通链接函数）和childLinkFn（复合链接函数），通过nodeList[i]获取nodeLinkFn对应的节点node。<br>2.对于当前节点node，<br>  如果有nodeLinkFn，则首先根据nodeLinkFn包含的信息nodeLinkFn.scope生成恰当的子scope，如果有子scope，则childScope=scope.$new()，否则childScope=scope，然后执行nodeLinkFn，即nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);<br>  如果没有nodeLinkFn，但有childLinkFn，则执行childLinkFn，即回到步骤1，继续执行子复合链接函数： childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn)。<br>3.执行结束。</p>\n<p>重点说明：compileNodes方法处理的是模板DOM（对应compileNode），nodeLinkFn方法执行时是针对已经是编译后的DOM（对应linkNode），那么问题来了，linkFns数组中保存的node索引i，是在模板DOM中的顺序，而compositeLinkFn执行时却根据它从编译后的DOM中取node，对应不上？首先，对于有模板的指令，模板只能有一个根节点，即compileNode和linkNode是一一对应的，对于没有模板的指令，则compileNode===linkNode。再关键在于applyDirectivesToNode方法，该方法处理compileNode并最终返回了一个能够处理linkNode的nodeLinkFn，所以在nodeLinkFn在 最后执行的时候，既能够访问到compileNode（闭包），也能够访问到其该compileNode在变换之后对应的linkNode（参数），它在内部做了处理。</p>\n<p>由上面我们知道，复合链接函数compileLinkFn的执行最后都是nodeLinkFn的执行，而nodeLinkFn是由applyDirectivesToNode方法返回的，顾名思义，它将指令应用到节点，完成了模板DOM到最终DOM的转换。</p>\n<p>三.applyDirectivesToNode的执行过程(待完成)</p>\n<p>四.nodeLinkFn的执行过程(待完成)</p>\n","excerpt":"<p>angular的DOM编译过程总的来说，是编译DOM，生成一个复合链接函数，然后传入scope作为参数，执行该链接函数，在scope和实际的DOM之间建立联系，编译过程结束。<br>下面主要来说一下编译DOM并生成链接函数的过程，以下分析基于<a href=\"https://github.com/Gpia/temp-data/blob/master/javascript/lib/angular-1.3.0.js\">angular-1.3.0源码</a>，由于代码很长，不在此贴出，可点击此链接查看，涉及到的内容主要从6094行开始。<br>编译DOM并生成链接函数的过程是由一个叫做compileNodes的内部方法完成的，该方法从一个指定的待编译节点列表开始编译，对于从document元素上启动的angular应用，那么待编译节点列表从一个只包含document元素（内部使用的是document的包装类型，即jqLite(document)）的数组开始，形如 [jqLite(document)]。</p>","more":"<p>一.具体来说compileNodes的过程：</p>\n<p>1.对于待编译节点列表nodeList中的每一个节点node，收集它上面的指令（collectDirectives），然后对该节点node应用指令（applyDirectivesToNode），调用applyDirectivesToNode方法会返回一个当前node的链接函数nodeLinkFn；接着，如果有子节点，则重复步骤1，并传入子节点列表childNodes作为参数，生成childNodeLinkFn。<br>2.将nodeLinkFn和childLinkFn加入一个linkFns数组，保存（linkFns.push(i, nodeLinkFn, childLinkFn)，i是node在nodeList中的索引）即linkFns中包含了待编译节点列表中每一个node的nodeLinkFn和childLinkFn。<br>3.返回一个复合链接函数compositeLinkFn。</p>\n<p>通过以上3步compileNodes已经执行结束，此过程中DOM中指令的编译过程已经完成，即已经完成了指令的变换（applyDirectivesToNode方法），比如用指令的模板替换指令的占位元素。</p>\n<p>还通过上述步骤，compileNodes返回的是一个复合链接函数compositeLinkFn，applyDirectivesToNode返回的是一个普通的链接函数nodeLinkFn，<br>复合链接函数用于执行当前节点node的nodeLinkFn和当前节点子节点的childLinkFn，其中由于childLinkFn是由compileNodes的递归调用返回的，所以它是一个复合链接函数，而当前节点的nodeLinkFn是由applyDirectivesToNode返回的，是一个普通的链接函数。即compositeLinkFn的执行到最后都是nodeLinkFn的执行。</p>\n<p>实际上，上述步骤3返回的链接函数构成了一个闭包，它在执行时能够访问到上面的linkFns。</p>\n<p>二.上面步骤3返回的的复合链接函数的执行过程（传入参数：scope,nodeList，rootElement。）</p>\n<p>1.遍历linkFns，每一次遍历，都取出一个节点索引i，nodeLinkFn（普通链接函数）和childLinkFn（复合链接函数），通过nodeList[i]获取nodeLinkFn对应的节点node。<br>2.对于当前节点node，<br>  如果有nodeLinkFn，则首先根据nodeLinkFn包含的信息nodeLinkFn.scope生成恰当的子scope，如果有子scope，则childScope=scope.$new()，否则childScope=scope，然后执行nodeLinkFn，即nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);<br>  如果没有nodeLinkFn，但有childLinkFn，则执行childLinkFn，即回到步骤1，继续执行子复合链接函数： childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn)。<br>3.执行结束。</p>\n<p>重点说明：compileNodes方法处理的是模板DOM（对应compileNode），nodeLinkFn方法执行时是针对已经是编译后的DOM（对应linkNode），那么问题来了，linkFns数组中保存的node索引i，是在模板DOM中的顺序，而compositeLinkFn执行时却根据它从编译后的DOM中取node，对应不上？首先，对于有模板的指令，模板只能有一个根节点，即compileNode和linkNode是一一对应的，对于没有模板的指令，则compileNode===linkNode。再关键在于applyDirectivesToNode方法，该方法处理compileNode并最终返回了一个能够处理linkNode的nodeLinkFn，所以在nodeLinkFn在 最后执行的时候，既能够访问到compileNode（闭包），也能够访问到其该compileNode在变换之后对应的linkNode（参数），它在内部做了处理。</p>\n<p>由上面我们知道，复合链接函数compileLinkFn的执行最后都是nodeLinkFn的执行，而nodeLinkFn是由applyDirectivesToNode方法返回的，顾名思义，它将指令应用到节点，完成了模板DOM到最终DOM的转换。</p>\n<p>三.applyDirectivesToNode的执行过程(待完成)</p>\n<p>四.nodeLinkFn的执行过程(待完成)</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cirfl2nhp0006v9s6z0xbzrjh","category_id":"cirfl2nhh0004v9s6ohu80igv","_id":"cirfl2ni5000lv9s6bjot1wyy"},{"post_id":"cirfl2nhp0006v9s6z0xbzrjh","category_id":"cirfl2ni2000ev9s6cwzv19qk","_id":"cirfl2ni6000ov9s6v8egr247"},{"post_id":"cirfl2nh10000v9s6zjflpqok","category_id":"cirfl2nhh0004v9s6ohu80igv","_id":"cirfl2ni6000pv9s66c7r1mdl"},{"post_id":"cirfl2nh10000v9s6zjflpqok","category_id":"cirfl2ni4000jv9s6n3lgg55c","_id":"cirfl2ni7000sv9s6jkpesm8w"},{"post_id":"cirfl2nhs0008v9s6rkmooryq","category_id":"cirfl2ni6000nv9s6j6ear7up","_id":"cirfl2ni8000vv9s6vh9sb4id"},{"post_id":"cirfl2nhv000av9s6oe7uu9md","category_id":"cirfl2ni6000nv9s6j6ear7up","_id":"cirfl2ni9000zv9s6xjkrw4bm"},{"post_id":"cirfl2nh90002v9s6hyqueraz","category_id":"cirfl2nhh0004v9s6ohu80igv","_id":"cirfl2nib0013v9s6y0vhhwof"},{"post_id":"cirfl2nh90002v9s6hyqueraz","category_id":"cirfl2ni8000wv9s6w0br3bra","_id":"cirfl2nid0017v9s6j8u0w57u"},{"post_id":"cirfl2nhy000bv9s6r9q0laah","category_id":"cirfl2nhh0004v9s6ohu80igv","_id":"cirfl2nie0018v9s6dsn1iafn"},{"post_id":"cirfl2nhy000bv9s6r9q0laah","category_id":"cirfl2ni2000ev9s6cwzv19qk","_id":"cirfl2nif001av9s618w5o10i"},{"post_id":"cirfl2nhi0005v9s6vc1h62w0","category_id":"cirfl2ni0000cv9s6gk9k4hqa","_id":"cirfl2nig001bv9s6uupdchpu"},{"post_id":"cirfl2nhi0005v9s6vc1h62w0","category_id":"cirfl2nib0015v9s6wnmgbr1f","_id":"cirfl2nig001dv9s665pbddzh"}],"PostTag":[{"post_id":"cirfl2nh10000v9s6zjflpqok","tag_id":"cirfl2nhe0003v9s6bx075mtw","_id":"cirfl2ni3000gv9s6vijmwutu"},{"post_id":"cirfl2nh10000v9s6zjflpqok","tag_id":"cirfl2nhr0007v9s6mlyzvpd8","_id":"cirfl2ni3000hv9s6r2sojizy"},{"post_id":"cirfl2nh10000v9s6zjflpqok","tag_id":"cirfl2ni0000dv9s60wcbuk8p","_id":"cirfl2ni4000kv9s60c8wf4iy"},{"post_id":"cirfl2nh90002v9s6hyqueraz","tag_id":"cirfl2nhe0003v9s6bx075mtw","_id":"cirfl2ni7000tv9s6v6hm2qly"},{"post_id":"cirfl2nh90002v9s6hyqueraz","tag_id":"cirfl2ni3000iv9s6ayjtzkbf","_id":"cirfl2ni8000uv9s6ysl4v6ob"},{"post_id":"cirfl2nh90002v9s6hyqueraz","tag_id":"cirfl2ni5000mv9s6f191nvxt","_id":"cirfl2ni9000yv9s67jrbrl67"},{"post_id":"cirfl2nhi0005v9s6vc1h62w0","tag_id":"cirfl2ni7000qv9s66v92scdv","_id":"cirfl2nia0012v9s6w4hrbpzo"},{"post_id":"cirfl2nhi0005v9s6vc1h62w0","tag_id":"cirfl2ni9000xv9s62l1yg22z","_id":"cirfl2nib0014v9s61gjduey8"},{"post_id":"cirfl2nhp0006v9s6z0xbzrjh","tag_id":"cirfl2nia0011v9s6ioscz633","_id":"cirfl2nij001ev9s6g5a4uzx9"},{"post_id":"cirfl2nhp0006v9s6z0xbzrjh","tag_id":"cirfl2nhe0003v9s6bx075mtw","_id":"cirfl2nij001fv9s6n4egf1xe"},{"post_id":"cirfl2nhp0006v9s6z0xbzrjh","tag_id":"cirfl2nic0016v9s6j3b2qtto","_id":"cirfl2nik001hv9s64hzflr66"},{"post_id":"cirfl2nhp0006v9s6z0xbzrjh","tag_id":"cirfl2nif0019v9s63anbk6cz","_id":"cirfl2nik001iv9s6g9t4xcsi"},{"post_id":"cirfl2nhs0008v9s6rkmooryq","tag_id":"cirfl2nig001cv9s6nbsk64h3","_id":"cirfl2nim001kv9s62afpwu06"},{"post_id":"cirfl2nhs0008v9s6rkmooryq","tag_id":"cirfl2nik001gv9s6gd8lgxm9","_id":"cirfl2nim001lv9s6z28fcp9w"},{"post_id":"cirfl2nhv000av9s6oe7uu9md","tag_id":"cirfl2nig001cv9s6nbsk64h3","_id":"cirfl2nio001ov9s66o6mbzq1"},{"post_id":"cirfl2nhv000av9s6oe7uu9md","tag_id":"cirfl2nik001gv9s6gd8lgxm9","_id":"cirfl2nio001pv9s63vil193o"},{"post_id":"cirfl2nhy000bv9s6r9q0laah","tag_id":"cirfl2nia0011v9s6ioscz633","_id":"cirfl2nip001sv9s6io00y5is"},{"post_id":"cirfl2nhy000bv9s6r9q0laah","tag_id":"cirfl2nhe0003v9s6bx075mtw","_id":"cirfl2nip001tv9s67ask02k6"},{"post_id":"cirfl2nhy000bv9s6r9q0laah","tag_id":"cirfl2nio001qv9s6al277w0f","_id":"cirfl2niq001uv9s6jnaisqgx"},{"post_id":"cirfl2nhy000bv9s6r9q0laah","tag_id":"cirfl2nip001rv9s60rleuht2","_id":"cirfl2niq001vv9s6qoy1xgzb"}],"Tag":[{"name":"javascript","_id":"cirfl2nhe0003v9s6bx075mtw"},{"name":"react","_id":"cirfl2nhr0007v9s6mlyzvpd8"},{"name":"react native","_id":"cirfl2ni0000dv9s60wcbuk8p"},{"name":"prototype","_id":"cirfl2ni3000iv9s6ayjtzkbf"},{"name":"原型","_id":"cirfl2ni5000mv9s6f191nvxt"},{"name":"权限","_id":"cirfl2ni7000qv9s66v92scdv"},{"name":"命令","_id":"cirfl2ni9000xv9s62l1yg22z"},{"name":"AngularJS","_id":"cirfl2nia0011v9s6ioscz633"},{"name":"双向绑定","_id":"cirfl2nic0016v9s6j3b2qtto"},{"name":"脏数据检测","_id":"cirfl2nif0019v9s63anbk6cz"},{"name":"随笔","_id":"cirfl2nig001cv9s6nbsk64h3"},{"name":"随想","_id":"cirfl2nik001gv9s6gd8lgxm9"},{"name":"compile","_id":"cirfl2nio001qv9s6al277w0f"},{"name":"编译","_id":"cirfl2nip001rv9s60rleuht2"}]}}